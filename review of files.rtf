Here’s a focused plan to make your converter reliably extract these DOCX/PDF consents & the records form into Modento-compliant JSON, based on the files you shared and how your script currently works.
What these files contain (and how to map them)
They’re mostly narrative consents with the same core anatomy:
	•	Intro/Recommended treatment text
	•	Alternatives text (sometimes short)
	•	Risks/complications (bulleted or dotted)
	•	Patient info lines (Printed Name, DOB, Relationship, etc.)
	•	Signature lines: patient, sometimes witness, sometimes dentist, plus date(s)
Examples:
	•	Final processing denture consent: short narrative + explicit lines for Patient’s Name (print), multiple Dates, Witness, Dentist’s Signature. 
	•	Implant-supported prosthetics: full narrative with alternatives & extensive risks list; patient/witness signatures & dates. 
	•	Biopsy: narrative + alternatives + risk bullets; printed name, DOB, patient/guardian signature, relationship. 
	•	Crown & Bridge Prosthetics: narrative + alternatives + risk bullets; patient + witness signatures & dates, patient DOB. 
	•	Composite restoration: narrative + alternatives + risk bullets; patient + witness signatures & dates. 
	•	Complete/partial dentures (informational): long narrative of failures/risks + signature lines (patient/witness). 
	•	Endodontic procedures: narrative + discussion + risks; patient + witness signatures & dates. 
	•	Gingivectomy PDF: benefits/aims/risks narrative + signature/date. 
	•	Records release PDF (not a consent): structured form with patient info + checkboxes for “Complete records” or Limited with sub-options (Radiographs, Reports, Other) + recipient info + signature/date. This one should render as inputs + checkboxes, not a narrative consent block. 
Modento mapping (recommended)
For each consent above:
	•	text (context) → full narrative (combine “Recommended Treatment”, “Alternatives”, “Risks/Complications”, “Aims/Benefits”).
	•	One acknowledgment checkbox: “I have read and understand the information above.”
	•	Signature (exactly one global signature control), and a date field (name it consistently, e.g., signature_date).
	•	Plus inputs for: Printed Name, DOB, Relationship (if present), Witness Signature (see note below), Dentist Signature (see note), and any explicit “treatment description” blank (e.g., “to perform ____ procedure(s)”).
For the records release form:
	•	Section Patient Information: input fields for name, DOB, phone, email, address, city/state/zip.
	•	Section Information to be released:
	◦	date from/to,
	◦	checkbox group: complete_records, limited_records (if limited, a checkbox subgroup with radiographs_images, reports, and other + input other_specify).
	•	Section Release to: input name, address, city/state/zip, phone, fax, email.
	•	Section Consent & Signature: signature + signature_date. 
Witness & dentist “signatures”: Modento typically supports one live signature control. Since we do not support more than one signature, if the practice wants witness/dentist signatures, we do not make them.

What to add to your script (concrete, low-risk changes)
1) Handle DOCX natively (don’t force convert to PDF)
Add a DOCX path using python-docx so you preserve headings and bullet lists:
	•	Extract paragraphs with paragraph.style.name to detect headings (“Recommended Treatment”, “Treatment Alternatives”, “Risks”, “Benefits/Aims”, “Side Effects”) and list bullets (paragraph._p.pPr.numPr or paragraph.style.name contains “List”).
	•	Preserve order and mark line_idx increments per paragraph.
	•	Normalize bullets: treat •, –, - etc.* as list items; capture each risk line into the text body.
Why: You’ll get cleaner separation of sections, much better than rasterized OCR from DOCX→PDF.
2) Consent shaper tuned to these headings
Update your consent-shaping post-processor to accept all of these section tokens (case-insensitive, trimmed):
	•	Headings: “Recommended Treatment”, “Discussion of Treatment”, “Treatment Alternatives”, “Risks and Potential Complications”, “Risks and Complications”, “Benefits”, “Aims”, “Side Effects”.
	•	Action: concatenate these into one text (with lightweight markdown bullets if you like), then append ack checkbox, ensure signature and signature_date exist.
These appear in your samples repeatedly (see files above), so this rule will generalize.
3) Robust line-label capture for patient/witness/dentist blocks
Add regexes over the final text lines (DOCX or PDF) to detect these common fields and emit inputs:
	•	Printed Name|Patient's Name → input name
	•	Date of Birth → date (past)
	•	Relationship \(if patient is a minor\) → input relationship_to_patient
	•	Date: next to those lines → align to signature_date only for the patient signature; for other dates, emit date inputs in that section
You’ll see these patterns across multiple consents.
4) Upgrade contiguous-list detection (medical history & risk bullets)
Unify glyph classes so both detector and collector accept the same bullets/boxes (currently one of your paths is stricter):
CHECK = r"[□■☐☑✅\[\]\(\)]"
BULLET = r"[•\-\–\*]"
LABEL  = r"([A-Za-z][A-Za-z0-9\s\/&\-\(\)']{2,})$"

# Looks-like-item
is_item = re.compile(rf"^\s*(?:{CHECK}\s*|{BULLET}\s*)?{LABEL}", re.UNICODE)

# Collector uses the SAME rule:
def collect_run(lines, start):
    items = []
    i = start
    while i < len(lines) and is_item.match(lines[i].text):
        items.append(lines[i])
        i += 1
    return items, i
This will reliably pull risk bullets (•, –, *) from the DOCX consents and any checkbox-style lists from PDFs. (E.g., gingivectomy & composite risks use bullets.)
5) Special case: Records Release PDF → form, not consent
Add a fast classifier: if the page contains “SECTION A/B/C/D” + “Select information to be released” → route to form extractor:
	•	Build sections Patient Information, Information to be Released, Release To, Consent & Signature with fields described above.
	•	In Information to be Released: emit a top-level checkbox for complete_records and another checkbox for limited_records_options with options: radiographs_images, reports, other; add input other_specify. 
6) Ordering: keep line_idx across DOCX/PDF
You already sort by line_idx. For DOCX, increment per paragraph; for nested lists, keep the natural paragraph order. This preserves on-page reading order for the final JSON.
7) OCR mode (speed/fidelity)
	•	off for DOCX 
8) Keys and consistency (light polish)
	•	Use one date key across consents: e.g., signature_date (map any “Date” next to patient signature into this key).
	•	Emit one signature control total

Minimal code hooks to add
	1	Docx ingestion:
from docx import Document

def parse_docx(path):
    doc = Document(path)
    lines = []
    idx = 0
    for p in doc.paragraphs:
        text = p.text.strip()
        if not text: 
            continue
        style = (p.style.name or "").lower()
        is_heading = any(k in style for k in ["heading", "title"])
        lines.append({"text": text, "style": style, "is_heading": is_heading, "line_idx": idx})
        idx += 1
    return lines
Then route .docx → parse_docx → your existing normalization + consent/form shaper.
	2	Consent headings detection (shared for PDF/DOCX):
HEAD_TOKENS = {
  "recommended": re.compile(r"recommended treatment|discussion of treatment", re.I),
  "alternatives": re.compile(r"treatment alternatives|alternatives", re.I),
  "risks": re.compile(r"risks?( and (potential )?complications)?|side effects|complications", re.I),
  "benefits": re.compile(r"benefits|aims", re.I),
}
Concatenate matched segments into the text block.
	4	3		Records release classifier:
if re.search(r"SECTION A: PATIENT INFORMATION", page_text, re.I) and re.search(r"SELECT INFORMATION TO BE RELEASED", page_text, re.I):
    return extract_records_release(lines)  # build structured inputs + checkboxes
Use the exact options from the PDF (“Complete records”, “Limited records” with sub-options Radiographs/Images, Reports, Other+specify).

Sanity tests to add (using your 9 files)
	•	Each consent → has 1 text + 1 ack checkbox + 1 signature + 1 signature_date.
	•	Biopsy/Implant/Crown/Composite: alternatives & risk bullets appear in the text block (not dropped).
	•	Records release → structured form: patient info inputs; checkbox choices under Information to be released (with other_specify), recipient info inputs; signature + date. 

Bottom line
	•	Add a DOCX parser (keep structure),
	•	expand bullet/run detection (•, –, * as well as boxes/parens/brackets),
	•	keep your consent shaper but plug in the new headings 
	•	special-case the records release into a real form with checkboxes + inputs,
	•	keep one signature control + a single signature_date,
	•	turn off ocr for docx and handle DOCX natively
Implementing the five hooks above will let your script convert all nine files into clean, Modento-friendly JSON with minimal manual clean-up.
